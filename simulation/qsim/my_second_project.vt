// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/19/2021 21:40:52"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    AccumulatorFINAL
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module AccumulatorFINAL_vlg_sample_tst(
	ADD_SUB,
	clk,
	I,
	reset,
	sampler_tx
);
input  ADD_SUB;
input  clk;
input [3:0] I;
input  reset;
output sampler_tx;

reg sample;
time current_time;
always @(ADD_SUB or clk or I or reset)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module AccumulatorFINAL_vlg_check_tst (
	Acc,
	Hex6,
	Hex7,
	sampler_rx
);
input [7:0] Acc;
input [6:0] Hex6;
input [6:0] Hex7;
input sampler_rx;

reg [7:0] Acc_expected;
reg [6:0] Hex6_expected;
reg [6:0] Hex7_expected;

reg [7:0] Acc_prev;
reg [6:0] Hex6_prev;
reg [6:0] Hex7_prev;

reg [7:0] Acc_expected_prev;
reg [6:0] Hex6_expected_prev;
reg [6:0] Hex7_expected_prev;

reg [7:0] last_Acc_exp;
reg [6:0] last_Hex6_exp;
reg [6:0] last_Hex7_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:3] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 3'b1;
end

// update real /o prevs

always @(trigger)
begin
	Acc_prev = Acc;
	Hex6_prev = Hex6;
	Hex7_prev = Hex7;
end

// update expected /o prevs

always @(trigger)
begin
	Acc_expected_prev = Acc_expected;
	Hex6_expected_prev = Hex6_expected;
	Hex7_expected_prev = Hex7_expected;
end


// expected Acc[ 7 ]
initial
begin
	Acc_expected[7] = 1'bX;
end 
// expected Acc[ 6 ]
initial
begin
	Acc_expected[6] = 1'bX;
end 
// expected Acc[ 5 ]
initial
begin
	Acc_expected[5] = 1'bX;
end 
// expected Acc[ 4 ]
initial
begin
	Acc_expected[4] = 1'bX;
end 
// expected Acc[ 3 ]
initial
begin
	Acc_expected[3] = 1'bX;
end 
// expected Acc[ 2 ]
initial
begin
	Acc_expected[2] = 1'bX;
end 
// expected Acc[ 1 ]
initial
begin
	Acc_expected[1] = 1'bX;
end 
// expected Acc[ 0 ]
initial
begin
	Acc_expected[0] = 1'bX;
end 
// expected Hex6[ 6 ]
initial
begin
	Hex6_expected[6] = 1'bX;
end 
// expected Hex6[ 5 ]
initial
begin
	Hex6_expected[5] = 1'bX;
end 
// expected Hex6[ 4 ]
initial
begin
	Hex6_expected[4] = 1'bX;
end 
// expected Hex6[ 3 ]
initial
begin
	Hex6_expected[3] = 1'bX;
end 
// expected Hex6[ 2 ]
initial
begin
	Hex6_expected[2] = 1'bX;
end 
// expected Hex6[ 1 ]
initial
begin
	Hex6_expected[1] = 1'bX;
end 
// expected Hex6[ 0 ]
initial
begin
	Hex6_expected[0] = 1'bX;
end 
// expected Hex7[ 6 ]
initial
begin
	Hex7_expected[6] = 1'bX;
end 
// expected Hex7[ 5 ]
initial
begin
	Hex7_expected[5] = 1'bX;
end 
// expected Hex7[ 4 ]
initial
begin
	Hex7_expected[4] = 1'bX;
end 
// expected Hex7[ 3 ]
initial
begin
	Hex7_expected[3] = 1'bX;
end 
// expected Hex7[ 2 ]
initial
begin
	Hex7_expected[2] = 1'bX;
end 
// expected Hex7[ 1 ]
initial
begin
	Hex7_expected[1] = 1'bX;
end 
// expected Hex7[ 0 ]
initial
begin
	Hex7_expected[0] = 1'bX;
end 
// generate trigger
always @(Acc_expected or Acc or Hex6_expected or Hex6 or Hex7_expected or Hex7)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected Acc = %b | expected Hex6 = %b | expected Hex7 = %b | ",Acc_expected_prev,Hex6_expected_prev,Hex7_expected_prev);
	$display("| real Acc = %b | real Hex6 = %b | real Hex7 = %b | ",Acc_prev,Hex6_prev,Hex7_prev);
`endif
	if (
		( Acc_expected_prev[0] !== 1'bx ) && ( Acc_prev[0] !== Acc_expected_prev[0] )
		&& ((Acc_expected_prev[0] !== last_Acc_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Acc[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Acc_expected_prev);
		$display ("     Real value = %b", Acc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Acc_exp[0] = Acc_expected_prev[0];
	end
	if (
		( Acc_expected_prev[1] !== 1'bx ) && ( Acc_prev[1] !== Acc_expected_prev[1] )
		&& ((Acc_expected_prev[1] !== last_Acc_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Acc[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Acc_expected_prev);
		$display ("     Real value = %b", Acc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Acc_exp[1] = Acc_expected_prev[1];
	end
	if (
		( Acc_expected_prev[2] !== 1'bx ) && ( Acc_prev[2] !== Acc_expected_prev[2] )
		&& ((Acc_expected_prev[2] !== last_Acc_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Acc[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Acc_expected_prev);
		$display ("     Real value = %b", Acc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Acc_exp[2] = Acc_expected_prev[2];
	end
	if (
		( Acc_expected_prev[3] !== 1'bx ) && ( Acc_prev[3] !== Acc_expected_prev[3] )
		&& ((Acc_expected_prev[3] !== last_Acc_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Acc[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Acc_expected_prev);
		$display ("     Real value = %b", Acc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Acc_exp[3] = Acc_expected_prev[3];
	end
	if (
		( Acc_expected_prev[4] !== 1'bx ) && ( Acc_prev[4] !== Acc_expected_prev[4] )
		&& ((Acc_expected_prev[4] !== last_Acc_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Acc[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Acc_expected_prev);
		$display ("     Real value = %b", Acc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Acc_exp[4] = Acc_expected_prev[4];
	end
	if (
		( Acc_expected_prev[5] !== 1'bx ) && ( Acc_prev[5] !== Acc_expected_prev[5] )
		&& ((Acc_expected_prev[5] !== last_Acc_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Acc[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Acc_expected_prev);
		$display ("     Real value = %b", Acc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Acc_exp[5] = Acc_expected_prev[5];
	end
	if (
		( Acc_expected_prev[6] !== 1'bx ) && ( Acc_prev[6] !== Acc_expected_prev[6] )
		&& ((Acc_expected_prev[6] !== last_Acc_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Acc[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Acc_expected_prev);
		$display ("     Real value = %b", Acc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Acc_exp[6] = Acc_expected_prev[6];
	end
	if (
		( Acc_expected_prev[7] !== 1'bx ) && ( Acc_prev[7] !== Acc_expected_prev[7] )
		&& ((Acc_expected_prev[7] !== last_Acc_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Acc[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Acc_expected_prev);
		$display ("     Real value = %b", Acc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Acc_exp[7] = Acc_expected_prev[7];
	end
	if (
		( Hex6_expected_prev[0] !== 1'bx ) && ( Hex6_prev[0] !== Hex6_expected_prev[0] )
		&& ((Hex6_expected_prev[0] !== last_Hex6_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Hex6[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Hex6_expected_prev);
		$display ("     Real value = %b", Hex6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Hex6_exp[0] = Hex6_expected_prev[0];
	end
	if (
		( Hex6_expected_prev[1] !== 1'bx ) && ( Hex6_prev[1] !== Hex6_expected_prev[1] )
		&& ((Hex6_expected_prev[1] !== last_Hex6_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Hex6[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Hex6_expected_prev);
		$display ("     Real value = %b", Hex6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Hex6_exp[1] = Hex6_expected_prev[1];
	end
	if (
		( Hex6_expected_prev[2] !== 1'bx ) && ( Hex6_prev[2] !== Hex6_expected_prev[2] )
		&& ((Hex6_expected_prev[2] !== last_Hex6_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Hex6[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Hex6_expected_prev);
		$display ("     Real value = %b", Hex6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Hex6_exp[2] = Hex6_expected_prev[2];
	end
	if (
		( Hex6_expected_prev[3] !== 1'bx ) && ( Hex6_prev[3] !== Hex6_expected_prev[3] )
		&& ((Hex6_expected_prev[3] !== last_Hex6_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Hex6[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Hex6_expected_prev);
		$display ("     Real value = %b", Hex6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Hex6_exp[3] = Hex6_expected_prev[3];
	end
	if (
		( Hex6_expected_prev[4] !== 1'bx ) && ( Hex6_prev[4] !== Hex6_expected_prev[4] )
		&& ((Hex6_expected_prev[4] !== last_Hex6_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Hex6[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Hex6_expected_prev);
		$display ("     Real value = %b", Hex6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Hex6_exp[4] = Hex6_expected_prev[4];
	end
	if (
		( Hex6_expected_prev[5] !== 1'bx ) && ( Hex6_prev[5] !== Hex6_expected_prev[5] )
		&& ((Hex6_expected_prev[5] !== last_Hex6_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Hex6[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Hex6_expected_prev);
		$display ("     Real value = %b", Hex6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Hex6_exp[5] = Hex6_expected_prev[5];
	end
	if (
		( Hex6_expected_prev[6] !== 1'bx ) && ( Hex6_prev[6] !== Hex6_expected_prev[6] )
		&& ((Hex6_expected_prev[6] !== last_Hex6_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Hex6[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Hex6_expected_prev);
		$display ("     Real value = %b", Hex6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Hex6_exp[6] = Hex6_expected_prev[6];
	end
	if (
		( Hex7_expected_prev[0] !== 1'bx ) && ( Hex7_prev[0] !== Hex7_expected_prev[0] )
		&& ((Hex7_expected_prev[0] !== last_Hex7_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Hex7[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Hex7_expected_prev);
		$display ("     Real value = %b", Hex7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Hex7_exp[0] = Hex7_expected_prev[0];
	end
	if (
		( Hex7_expected_prev[1] !== 1'bx ) && ( Hex7_prev[1] !== Hex7_expected_prev[1] )
		&& ((Hex7_expected_prev[1] !== last_Hex7_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Hex7[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Hex7_expected_prev);
		$display ("     Real value = %b", Hex7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Hex7_exp[1] = Hex7_expected_prev[1];
	end
	if (
		( Hex7_expected_prev[2] !== 1'bx ) && ( Hex7_prev[2] !== Hex7_expected_prev[2] )
		&& ((Hex7_expected_prev[2] !== last_Hex7_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Hex7[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Hex7_expected_prev);
		$display ("     Real value = %b", Hex7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Hex7_exp[2] = Hex7_expected_prev[2];
	end
	if (
		( Hex7_expected_prev[3] !== 1'bx ) && ( Hex7_prev[3] !== Hex7_expected_prev[3] )
		&& ((Hex7_expected_prev[3] !== last_Hex7_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Hex7[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Hex7_expected_prev);
		$display ("     Real value = %b", Hex7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Hex7_exp[3] = Hex7_expected_prev[3];
	end
	if (
		( Hex7_expected_prev[4] !== 1'bx ) && ( Hex7_prev[4] !== Hex7_expected_prev[4] )
		&& ((Hex7_expected_prev[4] !== last_Hex7_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Hex7[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Hex7_expected_prev);
		$display ("     Real value = %b", Hex7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Hex7_exp[4] = Hex7_expected_prev[4];
	end
	if (
		( Hex7_expected_prev[5] !== 1'bx ) && ( Hex7_prev[5] !== Hex7_expected_prev[5] )
		&& ((Hex7_expected_prev[5] !== last_Hex7_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Hex7[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Hex7_expected_prev);
		$display ("     Real value = %b", Hex7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Hex7_exp[5] = Hex7_expected_prev[5];
	end
	if (
		( Hex7_expected_prev[6] !== 1'bx ) && ( Hex7_prev[6] !== Hex7_expected_prev[6] )
		&& ((Hex7_expected_prev[6] !== last_Hex7_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Hex7[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Hex7_expected_prev);
		$display ("     Real value = %b", Hex7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Hex7_exp[6] = Hex7_expected_prev[6];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module AccumulatorFINAL_vlg_vec_tst();
// constants                                           
// general purpose registers
reg ADD_SUB;
reg clk;
reg [3:0] I;
reg reset;
// wires                                               
wire [7:0] Acc;
wire [6:0] Hex6;
wire [6:0] Hex7;

wire sampler;                             

// assign statements (if any)                          
AccumulatorFINAL i1 (
// port map - connection between master ports and signals/registers   
	.Acc(Acc),
	.ADD_SUB(ADD_SUB),
	.clk(clk),
	.Hex6(Hex6),
	.Hex7(Hex7),
	.I(I),
	.reset(reset)
);

// clk
always
begin
	clk = 1'b0;
	clk = #20000 1'b1;
	#20000;
end 

// reset
initial
begin
	reset = 1'b1;
	reset = #20000 1'b0;
end 

// ADD_SUB
initial
begin
	ADD_SUB = 1'b1;
end 
// I[ 3 ]
initial
begin
	I[3] = 1'b0;
	I[3] = #320000 1'b1;
	I[3] = #320000 1'b0;
	I[3] = #320000 1'b1;
end 
// I[ 2 ]
initial
begin
	repeat(3)
	begin
		I[2] = 1'b0;
		I[2] = #160000 1'b1;
		# 160000;
	end
	I[2] = 1'b0;
end 
// I[ 1 ]
initial
begin
	repeat(6)
	begin
		I[1] = 1'b0;
		I[1] = #80000 1'b1;
		# 80000;
	end
	I[1] = 1'b0;
end 
// I[ 0 ]
initial
begin
	repeat(12)
	begin
		I[0] = 1'b0;
		I[0] = #40000 1'b1;
		# 40000;
	end
	I[0] = 1'b0;
end 

AccumulatorFINAL_vlg_sample_tst tb_sample (
	.ADD_SUB(ADD_SUB),
	.clk(clk),
	.I(I),
	.reset(reset),
	.sampler_tx(sampler)
);

AccumulatorFINAL_vlg_check_tst tb_out(
	.Acc(Acc),
	.Hex6(Hex6),
	.Hex7(Hex7),
	.sampler_rx(sampler)
);
endmodule

